import com.joinforage.ShadowAarDependenciesPlugin

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id("com.google.devtools.ksp").version("1.8.10-1.0.9")
    id("org.jetbrains.kotlinx.kover") version "0.6.1"
}
apply plugin: ShadowAarDependenciesPlugin

ext {
    PUBLISH_GROUP_ID = 'com.joinforage'
    PUBLISH_VERSION = '4.1.1'
    PUBLISH_ARTIFACT_ID = 'forage-android'
    PUBLISH_DESCRIPTION = 'Forage Android SDK'
    PUBLISH_URL = 'https://github.com/teamforage/forage-android-sdk'
    PUBLISH_LICENSE_NAME = 'MIT License'
    PUBLISH_LICENSE_URL =
            'https://github.com/teamforage/forage-android-sdk/blob/main/LICENSE'
    PUBLISH_DEVELOPER_ID = 'owenkim'
    PUBLISH_DEVELOPER_NAME = 'Owen Kim'
    PUBLISH_DEVELOPER_EMAIL = 'owenkim@forage.com'
    PUBLISH_SCM_CONNECTION =
            'scm:git:github.com:teamforage/forage-android-sdk.git'
    PUBLISH_SCM_DEVELOPER_CONNECTION =
            'scm:git:ssh://github.com:teamforage/forage-android-sdk.git'
    PUBLISH_SCM_URL =
            'https://github.com/teamforage/forage-android-sdk/tree/main'
}

android {
    namespace 'com.joinforage.forage.android'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField 'String', 'PUBLISH_VERSION', "\"${PUBLISH_VERSION}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
        buildConfig true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    lint {
        sarifReport true
    }
}

// NOTE: this workaround is only necessary to support different
// major versions of Datadog. If we learn that all of our clients
// are using Datadog 2.X.X, then we could theoritically drop this
// extra gradle work; though we could need it again when a v3 major
// comes around
shadowAarDependencies {
    targetAar.set("com.datadoghq:dd-sdk-android-logs:2.21.0")
    targetPackageName.set("com.datadog")
    destinationPackageName.set("com.joinforage.datadog")

    /**
     * For normal dependencies, we can simply list it as
     * implementation("<group>:<name>:<version") and Gradle will take care of
     * fetching the dependencies AAR/JAR artifact from the remote repository.
     * Gradle will also take care of recursively fetching any sub-dependencies
     * as well.
     *
     * Because of the intensive manipulations we are doing to the datadog AAR
     * artifact, we have yet to figure out an elegant way for Gradle to continue
     * handling the process for resolving the dependencies and sub-dependencies
     * of datadog-android-sdk-logs.
     *
     * Until we have a more eloquent answer, we are opting to manually install
     * all the sub-dependencies that datadog-android-sdk-logs and its peer
     * dependencies datadog-android-sdk-core require.
     *
     * These dependencies are listed publically on the maven central reposictory
     * - https://mvnrepository.com/artifact/com.datadoghq/dd-sdk-android-logs/2.2.0
     * - https://mvnrepository.com/artifact/com.datadoghq/dd-sdk-android-core/2.2.0
     *
     * This function just organizes adding all of these dependencies to the
     * implementation configuration
     */
    subDependencies.set([
        "com.google.code.gson:gson:2.10.1",
        "com.lyft.kronos:kronos-android:0.0.1-alpha11",
        "org.jetbrains.kotlin:kotlin-reflect:1.9.24",
        "org.jetbrains.kotlin:kotlin-stdlib:1.9.24",
        "androidx.work:work-runtime:2.8.1",
    ])
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
    implementation "javax.ws.rs:javax.ws.rs-api:2.1@jar"
    // NOTE: com.datadoghq:dd-sdk-android-logs:2.21.0 require this being
    // 4.12.0, so we shouldn't bump to 5.X.X; 4.X.X are probably fine
    implementation("com.squareup.okhttp3:okhttp:4.12.0")

    testImplementation 'androidx.test:core-ktx:1.5.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
    testImplementation 'me.jorgecastillo:hiroaki-core:0.2.3'
    testImplementation 'org.assertj:assertj-core:3.18.0'
    testImplementation 'org.json:json:20220924'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation 'com.squareup.moshi:moshi:1.14.0'
    testImplementation 'com.squareup.moshi:moshi-adapters:1.14.0'

    // Use Mockito judiciously (mainly for mocking views)!
    // Opt for dependency injection and inheritance over Mockito
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.1.0'

    ksp 'com.squareup.moshi:moshi-kotlin-codegen:1.14.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}



apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"
