// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    // Dependencies required for the build script itself
    dependencies {
        // Plugin for publishing artifacts to Nexus repositories
        classpath 'io.github.gradle-nexus:publish-plugin:1.1.0'
    }
}

plugins {
    // Plugin for Android application projects
    id 'com.android.application' version '8.1.0' apply false
    // Plugin for Android library projects
    id 'com.android.library' version '8.1.0' apply false
    // Kotlin plugin for Android projects
    id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
    // Spotless plugin for code formatting
    id "com.diffplug.spotless" version "6.11.0"
    // Navigation Safe Args plugin for generating type-safe arguments in navigation graphs
    id 'androidx.navigation.safeargs' version '2.5.3' apply false
    // Dagger Hilt plugin for dependency injection
    id 'com.google.dagger.hilt.android' version '2.44' apply false
    // Plugin for publishing artifacts to Nexus repositories
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    // Kover plugin for Kotlin code coverage
    id 'org.jetbrains.kotlinx.kover' version '0.6.1'
    // Dokka plugin for generating documentation
    id "org.jetbrains.dokka" version "1.9.0"
}

subprojects {
    if (name != "forage-android") return

    apply plugin: 'org.jetbrains.dokka'

    tasks.named("dokkaHtml", org.jetbrains.dokka.gradle.DokkaTask.class) {
        // Set the output directory for generated documentation
        outputDirectory.set(file("${rootDir}/reference-docs"))

        // Configure Dokka to use specific plugin settings
        pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
        )

        dokkaSourceSets {
            configureEach {
                // Explicitly include the source directory containing Kotlin files
                sourceRoots.from(file("forage-android/src/main/java"))

                // Optional: Enable public API filtering (exclude private/protected members)
                includeNonPublic.set(false)

                // Optional: Skip empty packages
                skipEmptyPackages.set(true)

                // Provide package documentation if available
                // includes.from(file("docs/Module.md")) // Commented out because the file is missing
            }
        }

        // Commented out the footerMessage to fix the build issue
        // footerMessage.set("© 2023–2025 Forage Technology Corporation.")
    }
}

spotless {
    // Spotless configuration for code formatting
    kotlin {
        // Target Kotlin source files for formatting
        target '**/src/**/*.kt', '**/src/**/*.kts'
        // Use ktlint for formatting rules
        ktlint()
    }
    kotlinGradle {
        // Target Gradle Kotlin scripts for formatting
        target '*.gradle.kts'
        // Use ktlint for formatting rules
        ktlint()
    }
}

allprojects {
    // Apply Kotlin compile options to all projects
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Set the JVM target version for compiled Kotlin code
            jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
    }
} 

// Include an additional Gradle script for publishing configuration
apply from: "${rootDir}/scripts/publish-root.gradle"